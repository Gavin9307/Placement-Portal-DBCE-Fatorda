WITH AggregatedPlacements AS (
    SELECT
        c.C_Name AS company_name,
        c.C_Location AS location,
        jp.Job_Post_Date AS interview_date,
        d.Dept_Name AS dept_name,
        COUNT(DISTINCT ja.S_College_Email) AS students_count,
        jo.J_Offered_salary AS offered_salary
    FROM
        company AS c
    INNER JOIN
        jobposting AS jp ON jp.C_id = c.C_id
    INNER JOIN
        jobplacements AS jo ON jo.J_id = jp.J_id
    INNER JOIN
        jobdepartments AS jd ON jd.J_id = jp.J_id
    INNER JOIN
        jobapplication AS ja ON ja.J_id = jp.J_id
    INNER JOIN
        student AS s ON s.S_College_Email = ja.S_College_Email
    INNER JOIN
        class AS cl ON cl.Class_id = s.S_Class_id
    INNER JOIN
        department AS d ON cl.Dept_id = d.Dept_id
    WHERE ja.placed = 1 AND jp.Job_Post_Date BETWEEN '2024-01-01' AND '2024-12-31'
    GROUP BY
        c.C_Name, c.C_Location, jp.Job_Post_Date, jo.J_Offered_salary, d.Dept_Name
)

, DepartmentList AS (
    SELECT DISTINCT Dept_Name
    FROM department
)

, JobPostings AS (
    SELECT DISTINCT
        jp.J_id AS job_id,
        c.C_Name AS company_name,
        c.C_Location AS location,
        jp.Job_Post_Date AS interview_date,
        jo.J_Offered_salary AS offered_salary
    FROM
        jobposting AS jp
    LEFT JOIN
        company AS c ON c.C_id = jp.C_id
    LEFT JOIN
        jobplacements AS jo ON jo.J_id = jp.J_id
)

, JobDepartmentCross AS (
    SELECT
        jp.company_name,
        jp.location,
        jp.interview_date,
        jp.offered_salary,
        d.Dept_Name AS dept_name
    FROM
        JobPostings jp
    CROSS JOIN
        DepartmentList d
)

, DepartmentAggregates AS (
    SELECT
        j.company_name,
        j.location,
        j.interview_date,
        j.offered_salary,
        COALESCE(SUM(CASE WHEN j.dept_name = 'CIVIL' THEN ap.students_count ELSE 0 END), 0) AS CIVIL,
        COALESCE(SUM(CASE WHEN j.dept_name = 'MECH' THEN ap.students_count ELSE 0 END), 0) AS MECH,
        COALESCE(SUM(CASE WHEN j.dept_name = 'ETC' THEN ap.students_count ELSE 0 END), 0) AS ETC,
        COALESCE(SUM(CASE WHEN j.dept_name = 'COMP' THEN ap.students_count ELSE 0 END), 0) AS COMP,
        COALESCE(SUM(ap.students_count), 0) AS Total
    FROM
        JobDepartmentCross j
    LEFT JOIN
        AggregatedPlacements ap ON j.company_name = ap.company_name
                              AND j.interview_date = ap.interview_date
                              AND j.dept_name = ap.dept_name
    GROUP BY
        j.company_name, j.location, j.interview_date, j.offered_salary
)

SELECT
    ROW_NUMBER() OVER (ORDER BY da.company_name, da.interview_date) AS Sr_No,
    da.company_name AS `Company Name`,
    da.location AS Location,
    da.interview_date AS `Interview Date`,
    da.CIVIL,
    da.MECH,
    da.ETC,
    da.COMP,
    da.Total,
    da.offered_salary AS `Salary Package in LPA (Lakhs per annum)`
FROM
    DepartmentAggregates da
ORDER BY
    da.company_name, da.interview_date;



    if (isset($_POST["submit"])) {
    // Initialize variables
    $fromDate = $_GET['from_date'] ?? null;
    $toDate = $_GET['to_date'] ?? null;
    $departments = $_GET['departments'] ?? [];

    // Construct SQL query
    $sql = "SELECT 
        ROW_NUMBER() OVER (ORDER BY s.S_Fname, s.S_Lname) AS 'Sr. No',
        c.C_Name AS 'Company Name', 
        jp.Job_Post_Date AS 'interview_date',
        COALESCE(s.PLACED, 0) AS PLACED,
        CASE 
            WHEN d.Dept_name = 'COMP' THEN COALESCE(s.PLACED, 0)
            ELSE 0
        END AS no_of_students_in_comp,
        CASE 
            WHEN d.Dept_name = 'ECS' THEN COALESCE(s.PLACED, 0)
            ELSE 0
        END AS no_of_students_in_ecs,
        CASE 
            WHEN d.Dept_name = 'CIVIL' THEN COALESCE(s.PLACED, 0)
            ELSE 0
        END AS no_of_students_in_civil,
        CASE 
            WHEN d.Dept_name = 'MECH' THEN COALESCE(s.PLACED, 0)
            ELSE 0
        END AS no_of_students_in_mech,
        COALESCE(
            CASE WHEN d.Dept_name = 'COMP' THEN s.PLACED ELSE NULL END, 0
        ) + COALESCE(
            CASE WHEN d.Dept_name = 'ECS' THEN s.PLACED ELSE NULL END, 0
        ) + COALESCE(
            CASE WHEN d.Dept_name = 'CIVIL' THEN s.PLACED ELSE NULL END, 0
        ) + COALESCE(
            CASE WHEN d.Dept_name = 'MECH' THEN s.PLACED ELSE NULL END, 0
        ) AS total,
        COALESCE(jb.J_Offered_salary, 0) AS offered_salary
    FROM 
        student s
    INNER JOIN 
        jobapplication j ON j.S_College_Email = s.S_College_Email
    INNER JOIN 
        jobposting jp ON jp.J_id = j.J_id
    INNER JOIN 
        company c ON c.C_id = jp.C_id
    INNER JOIN 
        jobplacements jb ON jb.J_id = j.J_id
    INNER JOIN 
        class cl ON cl.Class_id = s.S_Class_id
    INNER JOIN 
        department d ON d.Dept_id = cl.Dept_id
    WHERE 
        1=1";

    if ($fromDate && $toDate) {
        $sql .= " AND jp.Job_Post_Date BETWEEN '$fromDate' AND '$toDate'";
    }

    if (!empty($departments)) {
        $departmentList = implode("','", $departments);
        $sql .= " AND d.Dept_name IN ('$departmentList')";
    }

    $result = $conn->query($sql);
    $spreadsheetId = '1GR8Z5zLN2CK-xmkXQnZRmvHicHavRvfAeicXTfZjfbc';


    $data = [];


    $questionTexts = [];


    if ($result->num_rows > 0) {
        //edit the headers
        $headers = array_merge([
            'Batch',
            'College Email',
            'Personal Email',
            'First Name',
            'Middle Name',
            'Last Name',
            'Department'
        ], $questionTexts);

        $data[] = $headers;

        // Fetch the rows
        while ($row = $result->fetch_assoc()) {
            $data[] = array_values($row);
        }
    } else {
        echo "No data found.";
        exit();
    }


    $range = 'Sheet1!A7:Z';


    try {
        $clearResponse = $service->spreadsheets_values->clear($spreadsheetId, $range, new \Google_Service_Sheets_ClearValuesRequest());
    } catch (Exception $e) {
        echo 'Error clearing sheet: ' . $e->getMessage();
        exit();
    }


    $body = new \Google_Service_Sheets_ValueRange([
        'values' => $data
    ]);
    $params = [
        'valueInputOption' => 'USER_ENTERED' // or 'RAW' depending on your need
    ];


    try {
        $response = $service->spreadsheets_values->update($spreadsheetId, $range, $body, $params);
        printf("%d cells updated.", $response->getUpdatedCells());
    } catch (Exception $e) {
        echo 'Error updating sheet: ' . $e->getMessage();
        exit();
    }
}